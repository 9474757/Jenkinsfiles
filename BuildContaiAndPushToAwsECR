cd /opt/$PROJ_NAME/$SERVICE_NAME
git fetch .
SERVICE_NAME=$(pwd | grep -o '[^/]*$')
PORT_SERVICE=$(cat ./Dockerfile | grep EXPOSE | grep -o '[^EXPOSE ]*$')
if [ -f "app.jar" ]; then rm app.jar; fi;

################################################## BUILD JAR

if [ -f "build.gradle" ]; then 
VR_JAR=$(cat ./build.gradle | grep SNAPSHOT | sed $1 's/version = \x27//g' | sed $1 's/-SNAPSHOT\x27//g') && 
if [ -d "build" ]; then rm -R build; fi;
gradle build -x test;
else 
VR_JAR=$(cat ./pom.xml | grep SNAPSHOT | sed $1 's/    <version>//g' | sed $1 's/-SNAPSHOT<\/version>//g')
if [ -d "target" ]; then rm -R target; fi;
mvn -Dmaven.test.failure.ignore clean package ; fi

################################################## BUILD DOCKER IMAGE

if [ -f "build.gradle" ]; then mv build/libs/*-SNAPSHOT.jar ./app.jar ;
else mv target/*-SNAPSHOT.jar ./app.jar; fi

cat <<EOF > Dockerfile_slim_image
FROM openjdk:8-jdk-alpine
EXPOSE $PORT_SERVICE
COPY app.jar app.jar
ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"]
EOF

docker build -f ./Dockerfile_slim_image -t $SERVICE_NAME:$VR_JAR .
if [ -f "Dockerfile_slim_image" ]; then rm Dockerfile_slim_image; fi;

################################################## PUSH TO AWS ECR 

docker tag $SERVICE_NAME:$VR_JAR $PROJ_URL_ECR:$SERVICE_NAME-latest
AWS_TOKEN=$(aws ecr get-login | awk '{print $6}')
docker login -u AWS -p $AWS_TOKEN https://$PROJ_URL_ECR
aws ecr batch-delete-image --repository-name automation --image-ids imageTag=$SERVICE_NAME-latest
docker push $PROJ_URL_ECR:$SERVICE_NAME-latest

